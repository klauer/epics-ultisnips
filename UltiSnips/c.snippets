# Autoconverted from visual studio code

snippet asub_code "aSub Record C subroutine"
// most of these examples are coming from Yves Lussignol (https://drf-gitlab.cea.fr/, signalProcessingApp module)
// the goal is to provide examples of reading and writing in different variable types
static long ${1:my_asub_routine}(aSubRecord *precord){
    // inputs:
    //     - a: short
    //     - b: float[]
    //     - c: int
    // outputs:
    //     - vala: float
    //     - valb: float[]
    
    // inputs
    short inputA = *(short *)precord->a;                     // input scalar
    epicsFloat32 *inputB_array = (epicsFloat32 *)precord->b; // input array
    int nob      = precord->nob;                             // nb of element in array (input b)
    int inputC   = *(epicsUInt32 *)precord->c;
    
    // read the whole input array (input b)
    float val;
    for (int i=0; i<nbOfElement; i++) {
        val = *inputB_array++;
    // read cell 3 of input array (input b)
    val = inputB_array[2];    // <=> val = ((epicsFloat32 *)precord->b)[2];
    
    // write the whole output array (output b)
    epicsFloat32 *outputB_array = (epicsFloat32 *)precord->valb;
    for(int i=0; i < nbOfElement; i++){
        *outputB_array++ = i;
    }
    // write cell 3 of output array (ouput b)
    outputB_array[2] = 3.14;    // <=> ((epicsFloat32 *)precord->valb)[2] = 3.10;
    
    ${2:// insert your code here}
    
    // outputs
    *(float *)precord->vala = 94.77;
    precord->nevb           = outsize; // number of output array elements
    
    return 0;
}
epicsRegisterFunction(${1:my_asub_routine});${0}
endsnippet

snippet asub_header "aSub record C header"
#include <aSubRecord.h>
#include <registryFunction.h>
#include <epicsExport.h>${0}
endsnippet

snippet generic_analog_io_device_code "generic analog io device support C code"
static long ${1:my_analog_device}_dev_report(int interest);
static long ${1:my_analog_device}_init(int after);
static long ${1:my_analog_device}_init_record(void* precord);
static long ${1:my_analog_device}_rw_record(void* precord);
static long ${1:my_analog_device}_get_ioint_info(int cmd, struct dbCommon* precord, IOSCANPVT* ppvt);
static long ${1:my_analog_device}_linconv(void* precord, int after);
struct {
    long number;
    DEVSUPFUN dev_report;
    DEVSUPFUN init;
    DEVSUPFUN init_record;
    DEVSUPFUN get_ioint_info;
    DEVSUPFUN read_write_record;
    DEVSUPFUN linconv;
} ${1:my_analog_device} = {
    6,
    (DEVSUPFUN)${1:my_analog_device}_dev_report,
    (DEVSUPFUN)${1:my_analog_device}_init,
    (DEVSUPFUN)${1:my_analog_device}_init_record,
    (DEVSUPFUN)${1:my_analog_device}_get_ioint_info,
    (DEVSUPFUN)${1:my_analog_device}_rw_record,
    (DEVSUPFUN)${1:my_analog_device}_linconv,
};

epicsExportAddress(dset, ${1:my_analog_device});
static long ${1:my_analog_device}_dev_report(int interest) {
    return 0;
}

static long ${1:my_analog_device}_init(int after) {
    return 0;
}

static long ${1:my_analog_device}_init_record(void* precord) {
    ${2:my_record}* rec = (${2:my_record}*)precord;
    return 0;
}

static long ${1:my_analog_device}_rw_record(void* precord) {
    ${2:my_record}* rec = (${2:my_record}*)precord;
    rec->pact = FALSE;
    return 0;
}

static long ${1:my_analog_device}_get_ioint_info(int cmd, struct dbCommon* precord, IOSCANPVT* ppvt) {
    return 0;
}

static long ${1:my_analog_device}_linconv(void* precord, int after) {
    return 0;
}
${0}
endsnippet

snippet generic_analog_io_device_header "generic analog io device support C header"
#include <epicsExport.h>
#include <${1:my_record}.h>
#include <registryFunction.h>${0}
endsnippet

snippet generic_digital_io_device_header "generic digital io device support C header"
#include <epicsExport.h>
#include <${1:my_record}.h>
#include <registryFunction.h>${0}
endsnippet

snippet generic_digital_io_device_code "generic digital io support C code"
static long ${1:my_device}_dev_report(int interest);
static long ${1:my_device}_init(int after);
static long ${1:my_device}_init_record(void* precord);
static long ${1:my_device}_rw_record(void* precord);
static long ${1:my_device}_get_ioint_info(int cmd, struct dbCommon* precord, IOSCANPVT* ppvt);
struct {
    long number;
    DEVSUPFUN dev_report;
    DEVSUPFUN init;
    DEVSUPFUN init_record;
    DEVSUPFUN get_ioint_info;
    DEVSUPFUN read_write_record;
} ${1:my_device} = {
    5,
    (DEVSUPFUN)${1:my_device}_dev_report,
    (DEVSUPFUN)${1:my_device}_init,
    (DEVSUPFUN)${1:my_device}_init_record,
    (DEVSUPFUN)${1:my_device}_get_ioint_info,
    (DEVSUPFUN)${1:my_device}_rw_record,
};

epicsExportAddress(dset, ${1:my_device});
static long ${1:my_device}_dev_report(int interest) {
    return 0;
}

static long ${1:my_device}_init(int after) {
    return 0;
}

static long ${1:my_device}_init_record(void* precord) {
    ${2:my_record}* rec = (${2:my_record}*)precord;
    return 0;
}

static long ${1:my_device}_rw_record(void* precord) {
    ${2:my_record}* rec = (${2:my_record}*)precord;
    rec->pact = FALSE;
    return 0;
}

static long ${1:my_device}_get_ioint_info(int cmd, struct dbCommon* precord, IOSCANPVT* ppvt) {
    return 0;
}
${0}
endsnippet

